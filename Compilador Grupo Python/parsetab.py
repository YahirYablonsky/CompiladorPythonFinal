
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftNEEQUALleftLTLTEGTGTEleftPLUSMINUSleftMULTDIVIDERESTleftLBRARBRAleftCOMMAAND ASSIGN BETWEEN CL_BRA CL_BRC COLON COMMA DECVAR DIVIDE ELSE ENDDEC ENDL EQUAL FLOAT FLOATD GT GTE ID IF INT INTEGER LBRA LT LTE MINUS MULT NE OP_BRA OP_BRC OR PLUS RBRA READ REST STRING STRINGD TAKE WHILE WRITE programa : bloque bloque : bloque sentencia ENDL bloque : sentencia ENDL sentencia : asignacion sentencia : sent_condicional sentencia : sent_declaracion sentencia : sent_write sentencia : sent_read sentencia : sent_while asignacion : ID ASSIGN expresion expresion : expresion PLUS termino expresion : expresion MINUS termino expresion :  termino termino : termino MULT factor termino : termino DIVIDE factor termino : termino REST factor termino : factor factor : INTEGER factor : ID  factor : FLOATD factor : LBRA expresion RBRA  sent_condicional : IF condicion fin_cond_verd OP_BRA bloque CL_BRAfin_cond_verd : sent_condicional : IF condicion fin_cond_verd OP_BRA bloque CL_BRA fin_bloque_verd ELSE OP_BRA bloque CL_BRA fin_bloque_verd : condicion : expresion apilo_expresion op_logico expresion apilo_expresionapilo_expresion : condicion : LBRA condicion RBRA  condicion : condicion  AND condicion condicion : condicion salto_opuesto OR condicion salto_opuesto : op_logico : NE \n                        | LT \n                        | LTE\n                        | GT \n                        | GTE \n                        | EQUAL\n                         condicion_between : BETWEEN LBRA ID COMMA tupla RBRA  tupla :  OP_BRC expresion apilo_expresion ENDL expresion apilo_expresion CL_BRC  condicion : condicion_between  sent_while : WHILE pre_cond_wh condicion fin_cond_wh OP_BRA bloque CL_BRAfin_cond_wh :pre_cond_wh : sent_declaracion : DECVAR lista_declaraciones ENDDEC lista_declaraciones : lista_declaraciones  declaracion lista_declaraciones : declaracion   declaracion : lista_id COLON tipo_dato ENDL lista_id : lista_id COMMA ID  lista_id : ID  tipo_dato : FLOAT \n    | STRING \n    | INT \n     sent_write : WRITE expresion  sent_write : WRITE STRINGD  sent_read : READ ID '
    
_lr_action_items = {'ID':([0,2,11,12,13,14,15,17,18,21,29,30,35,37,38,41,44,45,48,49,50,51,53,55,58,60,61,62,63,64,65,66,67,82,86,87,91,92,99,100,101,],[10,10,25,32,25,36,-43,-3,25,25,32,-46,25,25,-2,25,25,25,25,25,25,75,-45,80,10,25,25,-32,-33,-34,-35,-36,-37,10,-47,10,25,10,10,25,10,]),'IF':([0,2,17,38,58,82,87,92,99,101,],[11,11,-3,-2,11,11,11,11,11,11,]),'DECVAR':([0,2,17,38,58,82,87,92,99,101,],[12,12,-3,-2,12,12,12,12,12,12,]),'WRITE':([0,2,17,38,58,82,87,92,99,101,],[13,13,-3,-2,13,13,13,13,13,13,]),'READ':([0,2,17,38,58,82,87,92,99,101,],[14,14,-3,-2,14,14,14,14,14,14,]),'WHILE':([0,2,17,38,58,82,87,92,99,101,],[15,15,-3,-2,15,15,15,15,15,15,]),'$end':([1,2,17,38,],[0,-1,-3,-2,]),'ENDL':([3,4,5,6,7,8,9,16,23,25,26,27,28,33,34,36,39,52,68,69,71,72,73,74,76,77,78,79,88,95,96,98,103,],[17,-4,-5,-6,-7,-8,-9,38,-13,-19,-17,-18,-20,-53,-54,-55,-10,-44,-11,-12,-21,-14,-15,-16,86,-50,-51,-52,-22,-27,-41,100,-24,]),'ASSIGN':([10,],[18,]),'LBRA':([11,13,15,18,21,24,35,37,41,44,45,48,49,50,60,61,62,63,64,65,66,67,91,100,],[21,35,-43,35,21,51,35,21,21,35,35,35,35,35,21,35,-32,-33,-34,-35,-36,-37,35,35,]),'BETWEEN':([11,15,21,37,41,60,],[24,-43,24,24,24,24,]),'INTEGER':([11,13,15,18,21,35,37,41,44,45,48,49,50,60,61,62,63,64,65,66,67,91,100,],[27,27,-43,27,27,27,27,27,27,27,27,27,27,27,27,-32,-33,-34,-35,-36,-37,27,27,]),'FLOATD':([11,13,15,18,21,35,37,41,44,45,48,49,50,60,61,62,63,64,65,66,67,91,100,],[28,28,-43,28,28,28,28,28,28,28,28,28,28,28,28,-32,-33,-34,-35,-36,-37,28,28,]),'STRINGD':([13,],[34,]),'CL_BRA':([17,38,82,92,101,],[-3,-2,88,96,103,]),'AND':([19,22,23,25,26,27,28,46,57,59,68,69,70,71,72,73,74,83,84,89,94,],[41,-40,-13,-19,-17,-18,-20,41,41,41,-11,-12,-28,-21,-14,-15,-16,41,-27,-26,-38,]),'OP_BRA':([19,22,23,25,26,27,28,40,57,59,68,69,70,71,72,73,74,81,83,84,89,94,97,],[-23,-40,-13,-19,-17,-18,-20,58,-42,-29,-11,-12,-28,-21,-14,-15,-16,87,-30,-27,-26,-38,99,]),'OR':([19,22,23,25,26,27,28,42,46,57,59,68,69,70,71,72,73,74,83,84,89,94,],[-31,-40,-13,-19,-17,-18,-20,60,-31,-31,-29,-11,-12,-28,-21,-14,-15,-16,-30,-27,-26,-38,]),'PLUS':([20,23,25,26,27,28,33,39,47,56,68,69,71,72,73,74,84,95,102,],[44,-13,-19,-17,-18,-20,44,44,44,44,-11,-12,-21,-14,-15,-16,44,44,44,]),'MINUS':([20,23,25,26,27,28,33,39,47,56,68,69,71,72,73,74,84,95,102,],[45,-13,-19,-17,-18,-20,45,45,45,45,-11,-12,-21,-14,-15,-16,45,45,45,]),'NE':([20,23,25,26,27,28,43,47,68,69,71,72,73,74,],[-27,-13,-19,-17,-18,-20,62,-27,-11,-12,-21,-14,-15,-16,]),'LT':([20,23,25,26,27,28,43,47,68,69,71,72,73,74,],[-27,-13,-19,-17,-18,-20,63,-27,-11,-12,-21,-14,-15,-16,]),'LTE':([20,23,25,26,27,28,43,47,68,69,71,72,73,74,],[-27,-13,-19,-17,-18,-20,64,-27,-11,-12,-21,-14,-15,-16,]),'GT':([20,23,25,26,27,28,43,47,68,69,71,72,73,74,],[-27,-13,-19,-17,-18,-20,65,-27,-11,-12,-21,-14,-15,-16,]),'GTE':([20,23,25,26,27,28,43,47,68,69,71,72,73,74,],[-27,-13,-19,-17,-18,-20,66,-27,-11,-12,-21,-14,-15,-16,]),'EQUAL':([20,23,25,26,27,28,43,47,68,69,71,72,73,74,],[-27,-13,-19,-17,-18,-20,67,-27,-11,-12,-21,-14,-15,-16,]),'RBRA':([22,23,25,26,27,28,46,47,56,59,68,69,70,71,72,73,74,83,84,89,90,94,105,],[-40,-13,-19,-17,-18,-20,70,71,71,-29,-11,-12,-28,-21,-14,-15,-16,-30,-27,-26,94,-38,-39,]),'CL_BRC':([23,25,26,27,28,68,69,71,72,73,74,102,104,],[-13,-19,-17,-18,-20,-11,-12,-21,-14,-15,-16,-27,105,]),'MULT':([23,25,26,27,28,68,69,71,72,73,74,],[48,-19,-17,-18,-20,48,48,-21,-14,-15,-16,]),'DIVIDE':([23,25,26,27,28,68,69,71,72,73,74,],[49,-19,-17,-18,-20,49,49,-21,-14,-15,-16,]),'REST':([23,25,26,27,28,68,69,71,72,73,74,],[50,-19,-17,-18,-20,50,50,-21,-14,-15,-16,]),'ENDDEC':([29,30,53,86,],[52,-46,-45,-47,]),'COLON':([31,32,80,],[54,-49,-48,]),'COMMA':([31,32,75,80,],[55,-49,85,-48,]),'FLOAT':([54,],[77,]),'STRING':([54,],[78,]),'INT':([54,],[79,]),'OP_BRC':([85,],[91,]),'ELSE':([88,93,],[-25,97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'bloque':([0,58,87,99,],[2,82,92,101,]),'sentencia':([0,2,58,82,87,92,99,101,],[3,16,3,16,3,16,3,16,]),'asignacion':([0,2,58,82,87,92,99,101,],[4,4,4,4,4,4,4,4,]),'sent_condicional':([0,2,58,82,87,92,99,101,],[5,5,5,5,5,5,5,5,]),'sent_declaracion':([0,2,58,82,87,92,99,101,],[6,6,6,6,6,6,6,6,]),'sent_write':([0,2,58,82,87,92,99,101,],[7,7,7,7,7,7,7,7,]),'sent_read':([0,2,58,82,87,92,99,101,],[8,8,8,8,8,8,8,8,]),'sent_while':([0,2,58,82,87,92,99,101,],[9,9,9,9,9,9,9,9,]),'condicion':([11,21,37,41,60,],[19,46,57,59,83,]),'expresion':([11,13,18,21,35,37,41,60,61,91,100,],[20,33,39,47,56,20,20,20,84,95,102,]),'condicion_between':([11,21,37,41,60,],[22,22,22,22,22,]),'termino':([11,13,18,21,35,37,41,44,45,60,61,91,100,],[23,23,23,23,23,23,23,68,69,23,23,23,23,]),'factor':([11,13,18,21,35,37,41,44,45,48,49,50,60,61,91,100,],[26,26,26,26,26,26,26,26,26,72,73,74,26,26,26,26,]),'lista_declaraciones':([12,],[29,]),'declaracion':([12,29,],[30,53,]),'lista_id':([12,29,],[31,31,]),'pre_cond_wh':([15,],[37,]),'fin_cond_verd':([19,],[40,]),'salto_opuesto':([19,46,57,59,83,],[42,42,42,42,42,]),'apilo_expresion':([20,47,84,95,102,],[43,43,89,98,104,]),'op_logico':([43,],[61,]),'tipo_dato':([54,],[76,]),'fin_cond_wh':([57,],[81,]),'tupla':([85,],[90,]),'fin_bloque_verd':([88,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> bloque','programa',1,'p_program','Sintactico.py',99),
  ('bloque -> bloque sentencia ENDL','bloque',3,'p_bloque_1','Sintactico.py',109),
  ('bloque -> sentencia ENDL','bloque',2,'p_bloque_2','Sintactico.py',115),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia_1','Sintactico.py',121),
  ('sentencia -> sent_condicional','sentencia',1,'p_sentencia_2','Sintactico.py',126),
  ('sentencia -> sent_declaracion','sentencia',1,'p_sentencia_3','Sintactico.py',130),
  ('sentencia -> sent_write','sentencia',1,'p_sentencia_4','Sintactico.py',134),
  ('sentencia -> sent_read','sentencia',1,'p_sentencia_5','Sintactico.py',138),
  ('sentencia -> sent_while','sentencia',1,'p_sentencia_6','Sintactico.py',142),
  ('asignacion -> ID ASSIGN expresion','asignacion',3,'p_setencia_asig','Sintactico.py',147),
  ('expresion -> expresion PLUS termino','expresion',3,'p_expresion_plus','Sintactico.py',156),
  ('expresion -> expresion MINUS termino','expresion',3,'p_expresion_minus','Sintactico.py',161),
  ('expresion -> termino','expresion',1,'p_expresion_ter','Sintactico.py',167),
  ('termino -> termino MULT factor','termino',3,'p_termino_mult','Sintactico.py',174),
  ('termino -> termino DIVIDE factor','termino',3,'p_termino_divide','Sintactico.py',179),
  ('termino -> termino REST factor','termino',3,'p_termino_rest','Sintactico.py',184),
  ('termino -> factor','termino',1,'p_termino_factor','Sintactico.py',190),
  ('factor -> INTEGER','factor',1,'p_termino_const_int','Sintactico.py',198),
  ('factor -> ID','factor',1,'p_termino_id','Sintactico.py',203),
  ('factor -> FLOATD','factor',1,'p_termino_const_float','Sintactico.py',208),
  ('factor -> LBRA expresion RBRA','factor',3,'p_termino_expr','Sintactico.py',215),
  ('sent_condicional -> IF condicion fin_cond_verd OP_BRA bloque CL_BRA','sent_condicional',6,'p_condicional1','Sintactico.py',223),
  ('fin_cond_verd -> <empty>','fin_cond_verd',0,'p_fin_cond_verd','Sintactico.py',229),
  ('sent_condicional -> IF condicion fin_cond_verd OP_BRA bloque CL_BRA fin_bloque_verd ELSE OP_BRA bloque CL_BRA','sent_condicional',11,'p_sentencia_cond_else','Sintactico.py',240),
  ('fin_bloque_verd -> <empty>','fin_bloque_verd',0,'p_fin_bloque_verd','Sintactico.py',246),
  ('condicion -> expresion apilo_expresion op_logico expresion apilo_expresion','condicion',5,'p_condicion','Sintactico.py',255),
  ('apilo_expresion -> <empty>','apilo_expresion',0,'p_apilo_expresion','Sintactico.py',262),
  ('condicion -> LBRA condicion RBRA','condicion',3,'p_condicion_par','Sintactico.py',267),
  ('condicion -> condicion AND condicion','condicion',3,'p_condicion_and','Sintactico.py',271),
  ('condicion -> condicion salto_opuesto OR condicion','condicion',4,'p_condicion_or','Sintactico.py',276),
  ('salto_opuesto -> <empty>','salto_opuesto',0,'p_salto_opuesto','Sintactico.py',283),
  ('op_logico -> NE','op_logico',1,'p_op_logico','Sintactico.py',287),
  ('op_logico -> LT','op_logico',1,'p_op_logico','Sintactico.py',288),
  ('op_logico -> LTE','op_logico',1,'p_op_logico','Sintactico.py',289),
  ('op_logico -> GT','op_logico',1,'p_op_logico','Sintactico.py',290),
  ('op_logico -> GTE','op_logico',1,'p_op_logico','Sintactico.py',291),
  ('op_logico -> EQUAL','op_logico',1,'p_op_logico','Sintactico.py',292),
  ('condicion_between -> BETWEEN LBRA ID COMMA tupla RBRA','condicion_between',6,'p_condicion_between1','Sintactico.py',299),
  ('tupla -> OP_BRC expresion apilo_expresion ENDL expresion apilo_expresion CL_BRC','tupla',7,'p_tupla','Sintactico.py',316),
  ('condicion -> condicion_between','condicion',1,'p_condicion_between2','Sintactico.py',321),
  ('sent_while -> WHILE pre_cond_wh condicion fin_cond_wh OP_BRA bloque CL_BRA','sent_while',7,'p_sentencia_while','Sintactico.py',327),
  ('fin_cond_wh -> <empty>','fin_cond_wh',0,'p_fin_cond_while','Sintactico.py',333),
  ('pre_cond_wh -> <empty>','pre_cond_wh',0,'p_pre_cond_while','Sintactico.py',346),
  ('sent_declaracion -> DECVAR lista_declaraciones ENDDEC','sent_declaracion',3,'p_sentencia_declaracion','Sintactico.py',354),
  ('lista_declaraciones -> lista_declaraciones declaracion','lista_declaraciones',2,'p_lista_declaraciones_1','Sintactico.py',359),
  ('lista_declaraciones -> declaracion','lista_declaraciones',1,'p_lista_declaraciones_2','Sintactico.py',364),
  ('declaracion -> lista_id COLON tipo_dato ENDL','declaracion',4,'p_declaracion','Sintactico.py',369),
  ('lista_id -> lista_id COMMA ID','lista_id',3,'p_lista_id1','Sintactico.py',378),
  ('lista_id -> ID','lista_id',1,'p_lista_id2','Sintactico.py',383),
  ('tipo_dato -> FLOAT','tipo_dato',1,'p_tipo_dato','Sintactico.py',388),
  ('tipo_dato -> STRING','tipo_dato',1,'p_tipo_dato','Sintactico.py',389),
  ('tipo_dato -> INT','tipo_dato',1,'p_tipo_dato','Sintactico.py',390),
  ('sent_write -> WRITE expresion','sent_write',2,'p_sentencia_write1','Sintactico.py',399),
  ('sent_write -> WRITE STRINGD','sent_write',2,'p_sentencia_write2','Sintactico.py',404),
  ('sent_read -> READ ID','sent_read',2,'p_sentencia_read','Sintactico.py',410),
]
